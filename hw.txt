# 0. Импортируем наши модели
from news.models import *

# 1. Создать двух пользователей (с помощью метода User.objects.create_user('username')):
user1 = User.objects.create_user(username = 'nik1', first_name = 'Ivan', last_name = 'Ivanov')
user2 = User.objects.create_user(username = 'nik2', first_name = 'Denis', last_name = 'Denisov')

# 2. Создать два объекта модели Author, связанные с пользователями:
author1 = Author.objects.create(author_user=user1)
author2 = Author.objects.create(author_user=user2)

# 3. Добавить 4 категории в модель Category:

category1 = Category.objects.create(category_name='Innovation')
category2 = Category.objects.create(category_name='Lifestyle')
category3 = Category.objects.create(category_name='Business')
category4 = Category.objects.create(category_name='Games')

# 4. Добавить 2 статьи и 1 новость:

article1 = Post.objects.create(author=author1, type='a', title='Ужасы, палатки и кладбище: что создали художники на «Винзаводе» за девять месяцев', content='Девятый сезон «Открытых студий» стартовал на «Винзаводе» в начале года. Каждый из выбранных художников получил в свое распоряжение открытую мастерскую в общем пространстве, которая одновременно служила и выставочным стендом. Буквально на глазах у посетителей участники девять месяцев трудились над отчетными проектами, которые вошли в экспозицию «Никто не остров». По замыслу ментора этого сезона Леры Конончук, выставка «Никто не остров» играет на противоречии двух разнонаправленных трендов к открытости и обособленности, которые сегодня характерны как для арт-мира, так и для общества в целом. «Художники создают специфические пространства, работающие по установленным ими самими правилам: квартира, шатер, лес, сон, кладбище. Однако они существуют не изолированно. Связи, возникающие между соседними работами, раскрывают в паре тему напряжения между закрытостью и проницаемостью», — говорит Лера Конончук.')

article2 = Post.objects.create(author=author2, type='a', title='Делимся впечатлениями от Atomic Heart: Annihilation Instinct. Между Сциллой и Харибдой', content='Сегодня создатели Atomic Heart выпустили первое сюжетное дополнение Annihilation Instinct. Или, говоря по-русски, «Инстинкт Истребления». Оно продолжает события основной игры — точнее, события одной из концовок. И посвящено расширение знаменитой Элеаноре. Тому самому похотливому ремшкафу, который улучшает способности и оружие майора Нечаева.')

news1 = Post.objects.create(author=author2, type='n', title='Стало известно возможное место действия Call of Duty 2024', content='По данным CoD_Perseus, действие игры будет разворачиваться во время войны в Персидском заливе. В реальности этот конфликт произошёл в начале 1990-х, когда международная коалиция и США выступили против Ирака в поддержку Кувейта. Во время этой войны произошла знаменитая операция «Буря в пустыне».')


# 5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий):

PostCategory.objects.create(post=article1, category=category2)
PostCategory.objects.create(post=article2, category=category4)
PostCategory.objects.create(post=article2, category=category2)
PostCategory.objects.create(post=news1, category=category4)


# 6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий):

comment1 = Comment.objects.create(post=article1, author=user1, content='Тут какой-то комментарий')
comment2 = Comment.objects.create(post=article1, author=user2, content='Тут тоже какой-то комментарий')
comment3 = Comment.objects.create(post=article2, author=user1, content='А тут тоже, как понимаете, какой-то комментарий')
comment4 = Comment.objects.create(post=news1, author=user2, content='Тут тоже кто-то что-то написал под новостью')


# 7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов:
article1.like()
article1.like()
article1.like()
article1.dislike()
article1.like()
article1.dislike()
article1.dislike()
article1.dislike()
article1.like()
article2.like()
article2.like()
article1.dislike()
article2.like()
article1.dislike()

news1.dislike()
news1.like()
news1.like()
news1.like()
news1.dislike()
news1.like()
news1.like()
news1.like()

comment2.like()
comment2.like()
comment2.like()
comment1.dislike()
comment2.like()
comment2.like()
comment1.dislike()
comment2.like()
comment2.like()
comment2.like()
comment2.like()
comment2.like()
comment1.like()
comment1.dislike()
comment1.like()
comment1.like()
comment2.dislike()
comment1.like()
comment1.like()
comment1.like()
comment4.like()
comment4.like()
comment4.like()
comment3.like()
comment3.like()
comment3.like()
comment3.like()
comment3.like()
comment3.like()

# 8. Обновить рейтинги пользователей:

author1.update_rating()
author2.update_rating()

# 9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта):

best_user = Author.objects.order_by('-rating_author').values('author_user__username', 'rating_author').first()
print(f"Best user: {best_user['author_user__username']} has rating {best_user['rating_author']}")
      # Best user: nik2 has rating 42

# 10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье:

best_article = Post.objects.filter(type='a').order_by('-rating').first()
print('best article:', best_article.date.strftime('%d.%m.%y'), best_article.author.author_user.username, best_article.title ,best_article.preview(), sep='\n')

# 11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

comments = Comment.objects.filter(post=best_article)
for comment in comments:
      print(f"date: {comment.date.strftime('%d.%m.%y')}, user: {comment.author.username}, "f"rating {comment.rating}, текст комментария: {comment.content}")
